# -*- coding: utf-8 -*-
"""KNN (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PBjSiqOOHDqi4paRrhOe_Vq2nbeBCSSr
"""

# Install necessary libraries (if not already installed)
!pip install -q pandas numpy scikit-learn matplotlib

# Import required libraries
import pandas as pd
import numpy as np
from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, auc
import matplotlib.pyplot as plt



# Function to read datasets
def read_datasets():
    """Reads user profiles from CSV files."""
    # Replace with the correct paths to your files in Google Drive
    genuine_users_path = '/content/users.csv'
    fake_users_path = '/content/fusers.csv'

    genuine_users = pd.read_csv(genuine_users_path)
    fake_users = pd.read_csv(fake_users_path)

    # Create labels
    fake_users['label'] = 0  # Fake users labeled as 0
    genuine_users['label'] = 1  # Genuine users labeled as 1

    # Combine datasets
    combined_data = pd.concat([fake_users, genuine_users], ignore_index=True)

    # Shuffle the dataset
    combined_data = combined_data.sample(frac=1, random_state=42).reset_index(drop=True)

    return combined_data

# Function to predict gender using names
def predict_sex(name):
    """Predicts the gender of a user based on their first name."""
    common_female_names = {'mary', 'jane', 'linda', 'patricia', 'barbara'}
    common_male_names = {'john', 'robert', 'michael', 'james', 'david'}

    first_name = name.str.split(" ").str[0].str.lower()

    def map_gender(fname):
        if fname in common_female_names:
            return -2
        elif fname in common_male_names:
            return 2
        else:
            return 0  # Unknown gender

    return first_name.map(map_gender).fillna(0).astype(int)

# Function to extract features
def extract_features(data):
    """Extracts features for training."""
    # Map language to numerical codes
    lang_list = list(enumerate(np.unique(data['lang'])))
    lang_dict = {name: i for i, name in lang_list}
    data['lang_code'] = data['lang'].map(lambda val: lang_dict[val])

    # Predict gender
    data['sex_code'] = predict_sex(data['name'])

    # Select relevant feature columns
    feature_columns = ['statuses_count', 'followers_count', 'friends_count',
                       'favourites_count', 'listed_count', 'sex_code', 'lang_code']
    X = data[feature_columns]
    y = data['label']
    return X, y

# Function to plot the confusion matrix
def plot_confusion_matrix(cm, title='Confusion Matrix', cmap=plt.cm.Blues):
    """Plots the confusion matrix."""
    target_names = ['Fake', 'Genuine']
    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(target_names))
    plt.xticks(tick_marks, target_names, rotation=45)
    plt.yticks(tick_marks, target_names)
    plt.tight_layout()
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.show()

# Function to plot the ROC curve
def plot_roc_curve(y_test, y_pred_probs):
    """Plots the ROC curve."""
    fpr, tpr, _ = roc_curve(y_test, y_pred_probs)
    roc_auc = auc(fpr, tpr)

    plt.figure()
    plt.plot(fpr, tpr, color='blue', lw=2, label=f'AUC = {roc_auc:.2f}')
    plt.plot([0, 1], [0, 1], color='red', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('Receiver Operating Characteristic (ROC) Curve')
    plt.legend(loc='lower right')
    plt.show()

# Main execution
if __name__ == "__main__":
    # Step 1: Load and preprocess the dataset
    print("Reading datasets...")
    data = read_datasets()

    # Step 2: Extract features and labels
    print("Extracting features...")
    X, y = extract_features(data)

    # Step 3: Split the data into training and testing sets
    print("Splitting data into training and testing sets...")
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Step 4: Scale the features
    print("Scaling features...")
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Step 5: Train the KNN model
    print("Training KNN model...")
    knn = KNeighborsClassifier(n_neighbors=5)  # Default is 5 neighbors
    knn.fit(X_train, y_train)

    # Step 6: Make predictions
    print("Making predictions...")
    y_pred = knn.predict(X_test)

    # Step 7: Evaluate the model
    print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")

    cm = confusion_matrix(y_test, y_pred)
    print("Confusion Matrix:")
    print(cm)
    plot_confusion_matrix(cm, title='Confusion Matrix')

    print("Classification Report:")
    print(classification_report(y_test, y_pred, target_names=['Fake', 'Genuine']))

    # Step 8: Plot ROC curve
    print("Plotting ROC curve...")
    y_pred_probs = knn.predict_proba(X_test)[:, 1]
    plot_roc_curve(y_test, y_pred_probs)

def test_single_user(model, scaler, user_data):
    """Tests the model with a single user's data."""
    # Extract features for the single user
    user_data['sex_code'] = predict_sex(user_data['name'])
    lang_list = list(enumerate(np.unique(data['lang'])))
    lang_dict = {name: i for i, name in lang_list}
    user_data['lang_code'] = user_data['lang'].map(lambda val: lang_dict.get(val, -1))  # Handle unseen language

    feature_columns = ['statuses_count', 'followers_count', 'friends_count',
                       'favourites_count', 'listed_count', 'sex_code', 'lang_code']
    user_features = user_data[feature_columns]

    # Scale the features
    user_features_scaled = scaler.transform(user_features)

    # Predict using the trained model
    prediction = model.predict(user_features_scaled)
    predicted_class = 'Genuine' if prediction[0] == 1 else 'Fake'
    return predicted_class

# Example user data for Davide Dellacasa
user_data = pd.DataFrame({
    'name': ['Davide Dellacasa'],
    'statuses_count': [20370],
    'followers_count': [5470],
    'friends_count': [2385],
    'favourites_count': [145],
    'listed_count': [52],
    'lang': ['it']  # Assuming the language is Italian ("it")
})

# Test the model with the single user
predicted_class = test_single_user(knn, scaler, user_data)
print(f"The user is predicted to be: {predicted_class}")

# Example user data for SAK Nair
user_data = pd.DataFrame({
    'name': ['SAK Nair'],
    'statuses_count': [656],
    'followers_count': [57],
    'friends_count': [693],
    'favourites_count': [597],
    'listed_count': [0],
    'lang': ['en'],  # Language is English ("en")
})

# Test the model with the single user
predicted_class = test_single_user(knn, scaler, user_data)
print(f"The user is predicted to be: {predicted_class}")